### Elasticsearch Demo API Test Requests - Updated Version

# ========================================
# User Management API Tests
# ========================================

### 1. Get all users
GET http://localhost:8080/api/users
Content-Type: application/json

### 2. Create user
POST http://localhost:8080/api/users
Content-Type: application/json

{
  "name": "John Doe",
  "email": "john.doe@example.com"
}

### 3. Create another user
POST http://localhost:8080/api/users
Content-Type: application/json

{
  "name": "Jane Smith",
  "email": "jane.smith@example.com"
}

### 4. Get user by ID
GET http://localhost:8080/api/users/1
Content-Type: application/json

### 5. Update user information
PUT http://localhost:8080/api/users/1
Content-Type: application/json

{
  "name": "John Smith",
  "email": "john.smith@example.com"
}

### 6. Delete user
DELETE http://localhost:8080/api/users/2
Content-Type: application/json

# ========================================
# Article Management API Tests
# ========================================

### 7. Get all articles
GET http://localhost:8080/api/articles
Content-Type: application/json

### 8. Create article - Technical guide
POST http://localhost:8080/api/articles
Content-Type: application/json

{
  "title": "Spring Boot Getting Started Guide",
  "content": "Spring Boot is a rapid development framework based on the Spring framework that simplifies the configuration and deployment process of Spring applications.",
  "userId": 1
}

### 9. Create article - Programming tutorial
POST http://localhost:8080/api/articles
Content-Type: application/json

{
  "title": "Java Collections Framework Deep Dive",
  "content": "The Java Collections Framework is one of the most important parts of Java programming, providing a complete set of data structure implementations.",
  "userId": 1
}

### 10. Create article - Database related
POST http://localhost:8080/api/articles
Content-Type: application/json

{
  "title": "MySQL Performance Optimization Best Practices",
  "content": "MySQL, as one of the most popular relational databases, performance optimization is a skill that every developer needs to master.",
  "userId": 1
}

### 11. Create article - Microservices architecture
POST http://localhost:8080/api/articles
Content-Type: application/json

{
  "title": "Microservices Architecture Design Principles",
  "content": "Microservices architecture is an important trend in modern software development, breaking down large monolithic applications into multiple small, independent services.",
  "userId": 1
}

### 12. Get article by ID
GET http://localhost:8080/api/articles/1
Content-Type: application/json

### 13. Update article content
PUT http://localhost:8080/api/articles/1
Content-Type: application/json

{
  "title": "Spring Boot Getting Started Guide - Updated Version",
  "content": "Spring Boot is a rapid development framework based on the Spring framework that simplifies the configuration and deployment process of Spring applications, including core features such as auto-configuration and starter dependencies.",
  "userId": 1
}

### 14. Delete article
DELETE http://localhost:8080/api/articles/2
Content-Type: application/json

# ========================================
# Elasticsearch Full-text Search API Tests
# ========================================

### 15. Search articles containing "Spring"
GET http://localhost:8080/api/articles/search?keyword=Spring&page=0&size=10
Content-Type: application/json

### 16. Search articles containing "Java"
GET http://localhost:8080/api/articles/search?keyword=Java&page=0&size=5
Content-Type: application/json

### 17. Search articles containing "database"
GET http://localhost:8080/api/articles/search?keyword=database&page=0&size=10
Content-Type: application/json

### 18. Search articles containing "microservices"
GET http://localhost:8080/api/articles/search?keyword=microservices&page=0&size=10
Content-Type: application/json

### 19. Search articles containing "optimization"
GET http://localhost:8080/api/articles/search?keyword=optimization&page=0&size=10
Content-Type: application/json

### 20. Pagination search test - First page
GET http://localhost:8080/api/articles/search?keyword=framework&page=0&size=2
Content-Type: application/json

### 21. Pagination search test - Second page
GET http://localhost:8080/api/articles/search?keyword=framework&page=1&size=2
Content-Type: application/json

### 22. Empty keyword search test
GET http://localhost:8080/api/articles/search?keyword=&page=0&size=10
Content-Type: application/json

### 23. Search for non-existent keyword
GET http://localhost:8080/api/articles/search?keyword=nonexistentkeyword&page=0&size=10
Content-Type: application/json

# ========================================
# Edge Case Tests
# ========================================

### 24. Get non-existent user
GET http://localhost:8080/api/users/999
Content-Type: application/json

### 25. Get non-existent article
GET http://localhost:8080/api/articles/999
Content-Type: application/json

### 26. Update non-existent user
PUT http://localhost:8080/api/users/999
Content-Type: application/json

{
  "name": "Test User",
  "email": "test@example.com"
}

### 27. Update non-existent article
PUT http://localhost:8080/api/articles/999
Content-Type: application/json

{
  "title": "Test Article",
  "content": "Test content",
  "userId": 1
}

### 28. Delete non-existent user
DELETE http://localhost:8080/api/users/999
Content-Type: application/json

### 29. Delete non-existent article
DELETE http://localhost:8080/api/articles/999
Content-Type: application/json

### 30. Create user - Missing required fields test
POST http://localhost:8080/api/users
Content-Type: application/json

{
  "name": "Test User"
}

### 31. Create article - Missing required fields test
POST http://localhost:8080/api/articles
Content-Type: application/json

{
  "title": "Test Article"
}

### 32. Create article - Non-existent user test
POST http://localhost:8080/api/articles
Content-Type: application/json

{
  "title": "Test Article",
  "content": "Test content",
  "userId": 999
}

# ========================================
# Data Validation Tests
# ========================================

### 33. Create user - Empty name test
POST http://localhost:8080/api/users
Content-Type: application/json

{
  "name": "",
  "email": "empty@example.com"
}

### 34. Create user - Invalid email format test
POST http://localhost:8080/api/users
Content-Type: application/json

{
  "name": "Test User",
  "email": "invalid-email"
}

### 35. Create article - Empty title test
POST http://localhost:8080/api/articles
Content-Type: application/json

{
  "title": "",
  "content": "Test content",
  "userId": 1
}

### 36. Create article - Empty content test
POST http://localhost:8080/api/articles
Content-Type: application/json

{
  "title": "Test Title",
  "content": "",
  "userId": 1
}

# ========================================
# Final Verification - Get All Data
# ========================================

### 37. Final verification - Get all users
GET http://localhost:8080/api/users
Content-Type: application/json

### 38. Final verification - Get all articles
GET http://localhost:8080/api/articles
Content-Type: application/json
